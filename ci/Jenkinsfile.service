import groovy.json.JsonOutput

def get_environment() {
    if (BRANCH_NAME.equals("jenkinsfile-temp")) { return "dev" }
    if (BRANCH_NAME.equals("develop")) { return "dev" }
    if (BRANCH_NAME.equals("master")) { return "prod" }
    if (BRANCH_NAME.startsWith("release-")) { return "test" }
    return ""
}

def get_pollSCM_trigger() {
    if (get_environment().equals("dev")) { return "H/5 * * * *" }
    return ""
}

def get_version(version) {
    def version_xyz = version.tokenize('-').first()
    if (get_environment().equals("dev")) { return "${version_xyz}-SNAPSHOT" }
    if (get_environment().equals("prod")) { return "${version_xyz}" }
    if (get_environment().equals("test")) { return "${version_xyz}-RC-SNAPSHOT" }
    return "${version_xyz}-${get_environment().toUpperCase()}-SNAPSHOT"
}

pipeline {
    agent any
    environment {
        DB_VKM_URL = credentials("DB_VKM_URL")
        DB_VKM_CRED = credentials("DB_VKM_CRED")
        DB_TR_URL = credentials("DB_TR_URL")
        DB_TR_CRED = credentials("DB_TR_CRED")
        NOTIFY_SLACK_SUBJECT = "${JOB_NAME} - <${RUN_DISPLAY_URL}|${BUILD_DISPLAY_NAME}>"
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: "25"))
        disableConcurrentBuilds()
    }
    triggers {
        pollSCM(get_pollSCM_trigger())
    }
    stages {
        stage("Setup") {
            when {
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                script {

                    def pom = readMavenPom(file: 'pom.xml')

                    def deploy_target = get_environment()

                    def artifact_id = pom.artifactId
                    def artifact_version = get_version(pom.version)
                    def group_id = pom.groupId
                    def extension = pom.packaging
                    def filename = "target/${artifact_id}-${artifact_version}.${extension}"
                    def repository_url = "http://livibuild03.vally.local/nexus/repository/ptp"

                    STAGE_ACK_PARAMETERS = [
                        choice(choices: deploy_target, description: "Deploy target.", name: "deploy_target"),
                        choice(choices: artifact_id, description: "Artifact ID", name: "artifact_id"),
                        choice(choices: artifact_version, description: "Artifact version", name: "artifact_version"),
                        choice(choices: group_id, description: "Group ID", name: "group_id")
                    ]

                    def config_source = "src/main/resources/application-ci.properties"
                    def config = "src/main/resources/application.properties"

                    STAGE_BUILD_CMD = [
                        "cp ${config_source} ${config}",
                        "sed -i 's/DB_VKM_CRED_USR/${env.DB_VKM_CRED_USR}/g' ${config}",
                        "sed -i 's/DB_VKM_CRED_PSW/${env.DB_VKM_CRED_PSW}/g' ${config}",
                        "sed -i 's|DB_VKM_URL|${env.DB_VKM_URL}|g' ${config}",
                        "sed -i 's/DB_TR_CRED_USR/${env.DB_TR_CRED_USR}/g' ${config}",
                        "sed -i 's/DB_TR_CRED_PSW/${env.DB_TR_CRED_PSW}/g' ${config}",
                        "sed -i 's|DB_TR_URL|${env.DB_TR_URL}|g' ${config}",
                        [
                            "mvn",
                            "-f", "pom.xml",
                            "versions:set",
                            "-DnewVersion=${artifact_version}",
                            "--batch-mode"
                        ].join(" "),
                        [
                            "mvn",
                            "-f", "pom.xml",
                            "clean",
                            "install",
                            "--batch-mode"
                        ].join(" ")
                    ].join(" && ")

                    STAGE_CONFIRM_TEXT = "Create release ${group_id}:${artifact_id}@${artifact_version} and deploy to ${deploy_target}?"

                    STAGE_PUBLISH_CMD = [
                        "mvn",
                        "deploy:deploy-file",
                        "-Dfile=${filename}",
                        "-DpomFile=pom.xml",
                        "-DrepositoryId=nexus3",
                        "-Durl=${repository_url}",
                        "--batch-mode"
                    ].join(" ")

                    STAGE_DEPLOY_PLAYBOOK = [
                        inventory: "/data1/ansible/inventories/ptpapp",
                        playbook: "/data1/ansible/ptpapp.yml",
                        vaultCredentialsId: "vaultpass-ptp",
                        tags: "service-deploy-springboot",
                        extraVars: [
                            ptpapp_target: get_environment(),
                            ptpapp_deploy_springboot: JsonOutput.toJson([
                                artifact_id: artifact_id,
                                group_id: group_id,
                                extension: extension,
                                version: artifact_version,
                                repository_url: repository_url
                            ])
                        ]
                    ]
                }
            }
        }
        stage("Ack") {
            agent none
            options {
                timeout(time: 5, unit: "MINUTES")
            }
            when {
                expression {
                    get_environment()?.trim() && !get_pollSCM_trigger().trim()
                }
            }
            steps {
                slackSend(
                    color: "warning",
                    message: "${env.NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} requires acknowledgement! Visit <${RUN_DISPLAY_URL}|here> and verify!"
                )
                input(
                    message: "Proceed with following settings?",
                    parameters: STAGE_ACK_PARAMETERS
                )
            }
            post {
                aborted {
                    slackSend(
                        color: "danger",
                        message: "${env.NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} aborted because acknowledgement timeout exceeded or user action!"
                    )
                }
                failure {
                    slackSend(
                        color: "danger",
                        message: "${env.NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} aborted! Check <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
        stage("Docker") {
            when {
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                sh "cp /data1/ci/maven/* ci/confs/"
                script {
                    def jenkins_uid = sh(returnStdout: true, script: "id -u").trim()
                    def build_args = [
                        "--build-arg http_proxy=${http_proxy}",
                        "--build-arg https_proxy=${http_proxy}",
                        "--build-arg no_proxy=${no_proxy}",
                        "--build-arg JENKINS_UID=${jenkins_uid}"
                    ].join(" ")
                    docker.build(
                        "ptpapp-vkm-api-maven",
                        "${build_args} -f ci/Dockerfile.maven ci"
                    )
                }
            }
            post {
                failure {
                    slackSend(
                        color: "danger",
                        message: "${env.NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} failure! Check <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
        stage("Prepare") {
            agent {
                docker {
                    image "ptpapp-vkm-api-maven"
                    reuseNode true
                }
            }
            when {
                expression {
                    get_environment()?.equals("dev")
                }
            }
            steps {
                build(
                    job: "ptpapp/vkm-api/component-vkm-core/jenkinsfile-temp",
                    propagate: true,
                    wait: true
                )
            }
            post {
                failure {
                    slackSend(
                        color: "danger",
                        message: "${env.NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} failure! Check <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
        stage("Build") {
            agent {
                docker {
                    image "ptpapp-vkm-api-maven"
                    reuseNode true
                }
            }
            when {
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                sh STAGE_BUILD_CMD
            }
            post {
                failure {
                    slackSend(
                        color: "danger",
                        message: "${env.NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} failure! Check <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
        stage("Confirm") {
            agent none
            options {
                timeout(time: 5, unit: "MINUTES")
            }
            when {
                beforeAgent true
                expression {
                    get_environment().equals("prod")
                }
            }
            steps {
                slackSend(
                    color: "warning",
                    message: "${env.NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} requires confirmation! Visit <${RUN_DISPLAY_URL}|here> and verify!"
                )
                input STAGE_CONFIRM_TEXT
            }
            post {
                aborted {
                    slackSend(
                        color: "danger",
                        message: "${env.NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} aborted because confirmation timeout exceeded or user action!"
                    )
                }
                failure {
                    slackSend(
                        color: "danger",
                        message: "${env.NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} failure! Check <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
        stage("Publish") {
            agent {
                docker {
                    image "ptpapp-vkm-api-maven"
                    reuseNode true
                }
            }
            when {
                beforeAgent true
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                sh STAGE_PUBLISH_CMD
            }
            post {
                failure {
                    slackSend(
                        color: "danger",
                        message: "${env.NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} failure! Check <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
        stage("Deploy") {
            when {
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                ansiblePlaybook(STAGE_DEPLOY_PLAYBOOK)
            }
            post {
                failure {
                    slackSend(
                        color: "danger",
                        message: "${env.NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} failure! Check <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
    }

    post {
        always {
            slackSend(
                color: currentBuild.currentResult.equals("SUCCESS") ? "good" : "danger",
                message: "${env.NOTIFY_SLACK_SUBJECT}\nJob ${currentBuild.currentResult}! More info <${BUILD_URL}|here>."
            )
            deleteDir()
        }
    }
}
