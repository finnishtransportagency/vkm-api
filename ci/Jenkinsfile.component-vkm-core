def get_environment() {
    if (BRANCH_NAME.equals("develop")) { return "dev" }
    if (BRANCH_NAME.equals("master")) { return "prod" }
    if (BRANCH_NAME.startsWith("release-")) { return "test" }
    return ""
}

def get_version(version) {
    def version_xyz = version.tokenize('-').first()
    if (get_environment().equals("jenkinsfile-temp")) { return "${version_xyz}-SNAPSHOT" }
    if (get_environment().equals("dev")) { return "${version_xyz}-SNAPSHOT" }
    if (get_environment().equals("prod")) { return "${version_xyz}" }
    if (get_environment().equals("test")) { return "${version_xyz}-RC-SNAPSHOT" }
    return "${version_xyz}-${get_environment().toUpperCase()}-SNAPSHOT"
}

pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: "25"))
        disableConcurrentBuilds()
    }
    environment {
        VKM_CORE_PATH = "work/vkm-core"
        VKM_CORE_REF = "refs/heads/vkm-uusi"
        DB_VKM_URL = credentials("DB_VKM_URL")
        DB_VKM_CRED = credentials("DB_VKM_CRED")
        NOTIFY_SLACK_SUBJECT = "${JOB_NAME} - <${RUN_DISPLAY_URL}|${BUILD_DISPLAY_NAME}>"
    }
    stages {
        stage("Prepare") {
            parallel {
                stage("Docker") {
                    steps {
                        sh "cp /data1/ci/maven/* ci/confs/"
                        script {
                            def jenkins_uid = sh(returnStdout: true, script: "id -u").trim()
                            def build_args = [
                                "--build-arg http_proxy=${http_proxy}",
                                "--build-arg https_proxy=${http_proxy}",
                                "--build-arg no_proxy=${no_proxy}",
                                "--build-arg JENKINS_UID=${jenkins_uid}"
                            ].join(" ")
                            docker.build(
                                "ptpapp-vkm-core-maven",
                                "${build_args} -f ci/Dockerfile.maven ci"
                            )
                        }
                    }
                }
                stage("VKM-CORE") {
                    steps {
                        checkout(
                            changelog: false,
                            scm: [
                                $class: "GitSCM",
                                branches: [[ name: VKM_CORE_REF ]],
                                extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: VKM_CORE_PATH ]],
                                userRemoteConfigs: [[ url: "git@github.com:finnishtransportagency/vkm-core.git" ]]
                            ]
                        )
                    }
                }
            }
            post {
                failure {
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} aborted! Check <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
        stage("Setup") {
            steps {
                script {
                    def pom_path = "${VKM_CORE_PATH}/pom.xml"
                    def pom = readMavenPom(file: pom_path)
                    def artifact_id = pom.artifactId
                    def artifact_version = get_version(pom.version)
                    def group_id = pom.groupId
                    def extension = pom.packaging
                    def jar_path = "${VKM_CORE_PATH}/target/${artifact_id}-${artifact_version}.${extension}"
                    STAGE_BUILD_CMD = [
                        "mvn",
                        "clean",
                        "install",
                        "-Dmaven.test.skip=true",
                        "-DskipTests",
                        "--batch-mode",
                        "--file ${pom_path}"
                    ].join(" ")

                    STAGE_PUBLISH_CMD = [
                        "mvn",
                        "deploy:deploy-file",
                        "-Dfile=${jar_path}",
                        "-DpomFile=${pom_path}",
                        "-DrepositoryId=nexus3",
                        "-Durl=http://livibuild03.vally.local/nexus/repository/ptp",
                        "--batch-mode"
                    ].join(" ")

                }
            }
        }
        stage("Build") {
            agent {
                docker {
                    image "ptpapp-vkm-core-maven"
                    reuseNode true
                }
            }
            steps {
                sh STAGE_BUILD_CMD
            }
            post {
                failure {
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} aborted! Check <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
        stage("Publish") {
            agent {
                docker {
                    image "ptpapp-vkm-core-maven"
                    reuseNode true
                }
            }
            steps {
                sh STAGE_PUBLISH_CMD
            }
            post {
                failure {
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} aborted! Check <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
    }
    post {
        always {
            slackSend(
                color: currentBuild.currentResult.equals("SUCCESS") ? "good" : "danger",
                message: "${NOTIFY_SLACK_SUBJECT}\nJob ${currentBuild.currentResult}! More info <${BUILD_URL}|here>."
            )
            deleteDir()
        }
    }
}
